# -*- coding: utf-8 -*-
"""VGG16hand pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ZB5XUttcUVVqOnjLBBuWFQm8wfI2hYs
"""

import keras
from keras.datasets import mnist
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import Dense, Flatten
from keras import optimizers
from keras.models import Sequential
from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   validation_split=0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255,
                                shear_range = 0.2,
                                   zoom_range = 0.2,
                                   validation_split=0.2,
                                   horizontal_flip = True)


training_set = train_datagen.flow_from_directory(r'/content/drive/MyDrive/Dataset HPD/spiral/training',
                                                 target_size = (224, 224),
                                                 batch_size = 8,
                                                 subset="training",
                                                 class_mode = 'categorical')

validation_set = train_datagen.flow_from_directory(r'/content/drive/MyDrive/Dataset HPD/spiral/testing',
                                                 target_size = (224, 224),
                                                 batch_size = 8,
                                                subset="validation",
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(r'/content/drive/MyDrive/Dataset HPD/spiral/testing',
                                            target_size = (224, 224),
                                            batch_size = 8,
                                            class_mode = 'categorical')

#color_mode = "grayscale"


STEP_SIZE_TRAIN=training_set.n//training_set.batch_size
STEP_SIZE_VALID=validation_set.n//validation_set.batch_size
STEP_SIZE_TEST=test_set.n//test_set.batch_size

training_set

IMAGE_SIZE = [224, 224]
vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)
#here [3] denotes for RGB images(3 channels)

#don't train existing weigh
+ts
for layer in vgg.layers:
 layer.trainable = False

x = Flatten()(vgg.output)
prediction = Dense(2, activation='sigmoid')(x)
model = Model(inputs=vgg.input, outputs=prediction)
model.compile(loss='binary_crossentropy',
                    optimizer=optimizers.Adam(),
                    metrics=['accuracy'])
model.summary()

from datetime import datetime
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.callbacks import ReduceLROnPlateau
lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),
                               cooldown=0,
                               patience=5,
                               min_lr=0.5e-6)
checkpoint = ModelCheckpoint(filepath='mymodel.h5',
                               verbose=1, save_best_only=True)
callbacks = [checkpoint, lr_reducer]
start = datetime.now()
history = model.fit(training_set,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    epochs = 18, verbose=5,
                    validation_data = validation_set,
                    validation_steps = STEP_SIZE_TEST)
duration = datetime.now() - start
print("Training completed in time: ", duration)

score = model.evaluate(test_set)
print('Test Loss:', score[0])
print('Test accuracy:', score[1])

import matplotlib.pyplot as plt
plt.plot(history.history["handwriting accuracy"])
# plt.plot(history.history["val_accuracy"])
plt.plot(history.history["handwriting loss"])
# plt.plot(history.history["val_loss"])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","loss"])
plt.show()

testingPath_spiral = "/content/drive/MyDrive/Dataset HPD/spiral/testing"
test_prediction(spiralModels['Rf']['classifier'], testingPath_spiral)

testingPath_wave = "/content/drive/MyDrive/Dataset HPD/wave/testing"
test_prediction(waveModels['Rf']['classifier'], testingPath_wave)